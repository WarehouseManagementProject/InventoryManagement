import numpy as np
from warehouse import Warehouse, Item, Rack, build_sample_warehouse, item_directory
import random
class SimulatedAnn():
    def __init__(self, warehouse: Warehouse,items:list[Item]):
        self.warehouse = warehouse
        self.listOfItems = items
        self.unPlacedItems = len(self.listOfItems)
        self.currEntropy = self.unPlacedItems*35
        print(self.currEntropy)
    
    def calculateChangeInEntropy(self,item, rack, position, zone, aisle):

        # category and sub-category
        category_score = 0
        if item.category ==zone.category:
            category_score-=10
            if item.sub_category==aisle.sub_category:
                category_score-=15
        else:
            category_score+=55
        
        #retrieval urgency
        dist_from_origin = abs(position[0])+abs(position[1]+position[2]) #manhattan distance
        distance_score = dist_from_origin*item.retrieval_urgency
        #weight - checking how high is the rack in the aisle:
        weight_score = position[1]*item.weight
        #unplaced items
        # -10 because we just placed an item
        #This calculates only the change in entropy. #add it to the current entropy to get the actual E.
        entropy = (2*(category_score)) + (0.4*(distance_score)) + (0.4*weight_score) - 35
        return entropy
    
    def train(self, initalTemperature=1000, decay=0.9):
        for item in self.listOfItems:
            # print(item.category)
            isItemPlaced = False
            print("Curr loss ",self.currEntropy)
            tries = 0
            while isItemPlaced==False:
                
                rack, position, zone, aisle = self.warehouse.add_item(item)
                if not rack:
                    tries+=1
                    print("hello")
                    continue
                if tries == 10000:
                    break
                entropy_change = self.calculateChangeInEntropy(item, rack, position, zone, aisle)
                new_entropy = self.currEntropy + entropy_change
                if self.currEntropy>new_entropy:
                    self.currEntropy = new_entropy
                    isItemPlaced = True
                else:
                    if (random.uniform(0,1) <= np.exp(entropy_change/initalTemperature)):
                        self.currEntropy = new_entropy
                        isItemPlaced = True
                    else:
                        #undo item placement
                        self.warehouse.undo_item()
            self.unPlacedItems-=1
            initalTemperature*=decay
        return self.warehouse



warehouse = build_sample_warehouse(
    num_zones=6,
    num_aisles=3,
    num_racks=3,
    rack_dimensions=(5, 4, 6),
    rack_spacing=(2, 2, 0.5),
    show_vis=True
)

warehouse.start_visualization()
# warehouse = Warehouse(True)
def generateItems(num_items):
    generatedItems = []
    for i in range(num_items):
        category = random.choice(list(item_directory.keys()))
        sub_category = random.choice(list(item_directory[category].keys()))
        weight = random.uniform(0.1, 5.0)
        dimensions = (random.randint(1,3), random.randint(1,2), random.randint(1,2))
        product_name = f"Item_{i}"
        retrieval_urgency = random.randint(1, 5)
        item = Item(category, sub_category, weight, dimensions, product_name, retrieval_urgency)
        generatedItems.append(item)
    return generatedItems


items = generateItems(400)
SimulatedAnnealing  = SimulatedAnn(warehouse,items)
new_Warehouse = SimulatedAnnealing.train()
warehouse.show_final_state()